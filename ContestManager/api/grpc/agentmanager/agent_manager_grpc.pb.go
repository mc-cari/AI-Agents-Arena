// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.4
// source: agent_manager.proto

package agentmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentManagerService_CreateAgent_FullMethodName       = "/agentmanager.AgentManagerService/CreateAgent"
	AgentManagerService_GetAgentStatus_FullMethodName    = "/agentmanager.AgentManagerService/GetAgentStatus"
	AgentManagerService_ListAgents_FullMethodName        = "/agentmanager.AgentManagerService/ListAgents"
	AgentManagerService_StopAgent_FullMethodName         = "/agentmanager.AgentManagerService/StopAgent"
	AgentManagerService_StreamAgentEvents_FullMethodName = "/agentmanager.AgentManagerService/StreamAgentEvents"
	AgentManagerService_StreamAgentStatus_FullMethodName = "/agentmanager.AgentManagerService/StreamAgentStatus"
)

// AgentManagerServiceClient is the client API for AgentManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentManagerServiceClient interface {
	CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*CreateAgentResponse, error)
	GetAgentStatus(ctx context.Context, in *GetAgentStatusRequest, opts ...grpc.CallOption) (*AgentStatusResponse, error)
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
	StopAgent(ctx context.Context, in *StopAgentRequest, opts ...grpc.CallOption) (*StopAgentResponse, error)
	StreamAgentEvents(ctx context.Context, in *StreamAgentEventsRequest, opts ...grpc.CallOption) (AgentManagerService_StreamAgentEventsClient, error)
	StreamAgentStatus(ctx context.Context, in *StreamAgentStatusRequest, opts ...grpc.CallOption) (AgentManagerService_StreamAgentStatusClient, error)
}

type agentManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentManagerServiceClient(cc grpc.ClientConnInterface) AgentManagerServiceClient {
	return &agentManagerServiceClient{cc}
}

func (c *agentManagerServiceClient) CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*CreateAgentResponse, error) {
	out := new(CreateAgentResponse)
	err := c.cc.Invoke(ctx, AgentManagerService_CreateAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerServiceClient) GetAgentStatus(ctx context.Context, in *GetAgentStatusRequest, opts ...grpc.CallOption) (*AgentStatusResponse, error) {
	out := new(AgentStatusResponse)
	err := c.cc.Invoke(ctx, AgentManagerService_GetAgentStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerServiceClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, AgentManagerService_ListAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerServiceClient) StopAgent(ctx context.Context, in *StopAgentRequest, opts ...grpc.CallOption) (*StopAgentResponse, error) {
	out := new(StopAgentResponse)
	err := c.cc.Invoke(ctx, AgentManagerService_StopAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerServiceClient) StreamAgentEvents(ctx context.Context, in *StreamAgentEventsRequest, opts ...grpc.CallOption) (AgentManagerService_StreamAgentEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentManagerService_ServiceDesc.Streams[0], AgentManagerService_StreamAgentEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentManagerServiceStreamAgentEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentManagerService_StreamAgentEventsClient interface {
	Recv() (*AgentEvent, error)
	grpc.ClientStream
}

type agentManagerServiceStreamAgentEventsClient struct {
	grpc.ClientStream
}

func (x *agentManagerServiceStreamAgentEventsClient) Recv() (*AgentEvent, error) {
	m := new(AgentEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentManagerServiceClient) StreamAgentStatus(ctx context.Context, in *StreamAgentStatusRequest, opts ...grpc.CallOption) (AgentManagerService_StreamAgentStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentManagerService_ServiceDesc.Streams[1], AgentManagerService_StreamAgentStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentManagerServiceStreamAgentStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentManagerService_StreamAgentStatusClient interface {
	Recv() (*AgentStatusUpdate, error)
	grpc.ClientStream
}

type agentManagerServiceStreamAgentStatusClient struct {
	grpc.ClientStream
}

func (x *agentManagerServiceStreamAgentStatusClient) Recv() (*AgentStatusUpdate, error) {
	m := new(AgentStatusUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentManagerServiceServer is the server API for AgentManagerService service.
// All implementations must embed UnimplementedAgentManagerServiceServer
// for forward compatibility
type AgentManagerServiceServer interface {
	CreateAgent(context.Context, *CreateAgentRequest) (*CreateAgentResponse, error)
	GetAgentStatus(context.Context, *GetAgentStatusRequest) (*AgentStatusResponse, error)
	ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error)
	StopAgent(context.Context, *StopAgentRequest) (*StopAgentResponse, error)
	StreamAgentEvents(*StreamAgentEventsRequest, AgentManagerService_StreamAgentEventsServer) error
	StreamAgentStatus(*StreamAgentStatusRequest, AgentManagerService_StreamAgentStatusServer) error
	mustEmbedUnimplementedAgentManagerServiceServer()
}

// UnimplementedAgentManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentManagerServiceServer struct {
}

func (UnimplementedAgentManagerServiceServer) CreateAgent(context.Context, *CreateAgentRequest) (*CreateAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgent not implemented")
}
func (UnimplementedAgentManagerServiceServer) GetAgentStatus(context.Context, *GetAgentStatusRequest) (*AgentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentStatus not implemented")
}
func (UnimplementedAgentManagerServiceServer) ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedAgentManagerServiceServer) StopAgent(context.Context, *StopAgentRequest) (*StopAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAgent not implemented")
}
func (UnimplementedAgentManagerServiceServer) StreamAgentEvents(*StreamAgentEventsRequest, AgentManagerService_StreamAgentEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAgentEvents not implemented")
}
func (UnimplementedAgentManagerServiceServer) StreamAgentStatus(*StreamAgentStatusRequest, AgentManagerService_StreamAgentStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAgentStatus not implemented")
}
func (UnimplementedAgentManagerServiceServer) mustEmbedUnimplementedAgentManagerServiceServer() {}

// UnsafeAgentManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentManagerServiceServer will
// result in compilation errors.
type UnsafeAgentManagerServiceServer interface {
	mustEmbedUnimplementedAgentManagerServiceServer()
}

func RegisterAgentManagerServiceServer(s grpc.ServiceRegistrar, srv AgentManagerServiceServer) {
	s.RegisterService(&AgentManagerService_ServiceDesc, srv)
}

func _AgentManagerService_CreateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServiceServer).CreateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentManagerService_CreateAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServiceServer).CreateAgent(ctx, req.(*CreateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagerService_GetAgentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServiceServer).GetAgentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentManagerService_GetAgentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServiceServer).GetAgentStatus(ctx, req.(*GetAgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagerService_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServiceServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentManagerService_ListAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServiceServer).ListAgents(ctx, req.(*ListAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagerService_StopAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagerServiceServer).StopAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentManagerService_StopAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagerServiceServer).StopAgent(ctx, req.(*StopAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagerService_StreamAgentEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAgentEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentManagerServiceServer).StreamAgentEvents(m, &agentManagerServiceStreamAgentEventsServer{stream})
}

type AgentManagerService_StreamAgentEventsServer interface {
	Send(*AgentEvent) error
	grpc.ServerStream
}

type agentManagerServiceStreamAgentEventsServer struct {
	grpc.ServerStream
}

func (x *agentManagerServiceStreamAgentEventsServer) Send(m *AgentEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentManagerService_StreamAgentStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAgentStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentManagerServiceServer).StreamAgentStatus(m, &agentManagerServiceStreamAgentStatusServer{stream})
}

type AgentManagerService_StreamAgentStatusServer interface {
	Send(*AgentStatusUpdate) error
	grpc.ServerStream
}

type agentManagerServiceStreamAgentStatusServer struct {
	grpc.ServerStream
}

func (x *agentManagerServiceStreamAgentStatusServer) Send(m *AgentStatusUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// AgentManagerService_ServiceDesc is the grpc.ServiceDesc for AgentManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agentmanager.AgentManagerService",
	HandlerType: (*AgentManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAgent",
			Handler:    _AgentManagerService_CreateAgent_Handler,
		},
		{
			MethodName: "GetAgentStatus",
			Handler:    _AgentManagerService_GetAgentStatus_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _AgentManagerService_ListAgents_Handler,
		},
		{
			MethodName: "StopAgent",
			Handler:    _AgentManagerService_StopAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAgentEvents",
			Handler:       _AgentManagerService_StreamAgentEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamAgentStatus",
			Handler:       _AgentManagerService_StreamAgentStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent_manager.proto",
}
