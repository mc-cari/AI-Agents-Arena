syntax = "proto3";

package agentmanager;

option go_package = "contestmanager/api/grpc/agentmanager";

service AgentManagerService {
  rpc CreateAgent(CreateAgentRequest) returns (CreateAgentResponse);
  
  rpc GetAgentStatus(GetAgentStatusRequest) returns (AgentStatusResponse);
  
  rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse);
  
  rpc StopAgent(StopAgentRequest) returns (StopAgentResponse);
  
  rpc StreamAgentEvents(StreamAgentEventsRequest) returns (stream AgentEvent);
  
  rpc StreamAgentStatus(StreamAgentStatusRequest) returns (stream AgentStatusUpdate);
}

message Problem {
  string id = 1;
  string name = 2;
  string description = 3;
  int32 time_limit_ms = 4;
  int32 memory_limit_mb = 5;
}

message CreateAgentRequest {
  string contest_id = 1;
  string participant_id = 2;
  string model_name = 3;
  string contest_manager_host = 4;
  repeated Problem problems = 5;
  
  optional float temperature = 6;
  optional int32 max_tokens = 7;
  optional float timeout = 8;
}

message CreateAgentResponse {
  string agent_id = 1;
  string contest_id = 2;
  string participant_id = 3;
  string model_name = 4;
  AgentStatus status = 5;
  string message = 6;
}

message GetAgentStatusRequest {
  string agent_id = 1;
}

message AgentStatusResponse {
  string agent_id = 1;
  string contest_id = 2;
  string participant_id = 3;
  string model_name = 4;
  AgentStatus status = 5;
}

message ListAgentsRequest {
  optional string contest_id = 1;
  optional AgentStatus status = 2; 
}

message ListAgentsResponse {
  repeated AgentStatusResponse agents = 1;
}

message StopAgentRequest {
  string agent_id = 1;
  string reason = 2;
}

message StopAgentResponse {
  string agent_id = 1;
  bool success = 2;
  string message = 3;
}

message StreamAgentEventsRequest {
  string agent_id = 1;
}

message AgentEvent {
  string agent_id = 1;
  string event_type = 2;
  string message = 3;
  int64 timestamp = 4;
  map<string, string> metadata = 5;
}

message StreamAgentStatusRequest {
  optional string contest_id = 1;  
}

message AgentStatusUpdate {
  string agent_id = 1;
  string contest_id = 2;
  string participant_id = 3;
  string model_name = 4;
  AgentStatus status = 5;
  int64 timestamp = 6; 
}

enum AgentStatus {
  AGENT_STATUS_UNKNOWN = 0;
  AGENT_STATUS_INITIALIZING = 1;
  AGENT_STATUS_ANALYZING_CONTEST = 2;
  AGENT_STATUS_SELECTING_PROBLEM = 3;
  AGENT_STATUS_SOLVING_PROBLEM = 4;
  AGENT_STATUS_CODING = 5;
  AGENT_STATUS_SUBMITTING_SOLUTION = 6;
  AGENT_STATUS_CHECKING_RESULTS = 7;
  AGENT_STATUS_MONITORING_CONTEST = 8;
  AGENT_STATUS_COMPLETED = 9;
  AGENT_STATUS_FAILED = 10;
  AGENT_STATUS_STOPPED = 11;
  AGENT_STATUS_CONTEST_ENDED = 12;
}
