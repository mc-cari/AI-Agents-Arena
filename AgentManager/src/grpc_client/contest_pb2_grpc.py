# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import contest_pb2 as contest__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in contest_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ContestServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateContest = channel.unary_unary(
                '/contestmanager.ContestService/CreateContest',
                request_serializer=contest__pb2.CreateContestRequest.SerializeToString,
                response_deserializer=contest__pb2.CreateContestResponse.FromString,
                _registered_method=True)
        self.CreateContestWithProblems = channel.unary_unary(
                '/contestmanager.ContestService/CreateContestWithProblems',
                request_serializer=contest__pb2.CreateContestWithProblemsRequest.SerializeToString,
                response_deserializer=contest__pb2.CreateContestResponse.FromString,
                _registered_method=True)
        self.GetContest = channel.unary_unary(
                '/contestmanager.ContestService/GetContest',
                request_serializer=contest__pb2.GetContestRequest.SerializeToString,
                response_deserializer=contest__pb2.GetContestResponse.FromString,
                _registered_method=True)
        self.ListContests = channel.unary_unary(
                '/contestmanager.ContestService/ListContests',
                request_serializer=contest__pb2.ListContestsRequest.SerializeToString,
                response_deserializer=contest__pb2.ListContestsResponse.FromString,
                _registered_method=True)
        self.SubmitSolution = channel.unary_unary(
                '/contestmanager.ContestService/SubmitSolution',
                request_serializer=contest__pb2.SubmitSolutionRequest.SerializeToString,
                response_deserializer=contest__pb2.SubmitSolutionResponse.FromString,
                _registered_method=True)
        self.GetSubmissions = channel.unary_unary(
                '/contestmanager.ContestService/GetSubmissions',
                request_serializer=contest__pb2.GetSubmissionsRequest.SerializeToString,
                response_deserializer=contest__pb2.GetSubmissionsResponse.FromString,
                _registered_method=True)
        self.GetLeaderboard = channel.unary_unary(
                '/contestmanager.ContestService/GetLeaderboard',
                request_serializer=contest__pb2.GetLeaderboardRequest.SerializeToString,
                response_deserializer=contest__pb2.GetLeaderboardResponse.FromString,
                _registered_method=True)
        self.StreamLeaderboard = channel.unary_stream(
                '/contestmanager.ContestService/StreamLeaderboard',
                request_serializer=contest__pb2.StreamLeaderboardRequest.SerializeToString,
                response_deserializer=contest__pb2.LeaderboardUpdate.FromString,
                _registered_method=True)


class ContestServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateContest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateContestWithProblems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListContests(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitSolution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubmissions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLeaderboard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLeaderboard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ContestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateContest': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateContest,
                    request_deserializer=contest__pb2.CreateContestRequest.FromString,
                    response_serializer=contest__pb2.CreateContestResponse.SerializeToString,
            ),
            'CreateContestWithProblems': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateContestWithProblems,
                    request_deserializer=contest__pb2.CreateContestWithProblemsRequest.FromString,
                    response_serializer=contest__pb2.CreateContestResponse.SerializeToString,
            ),
            'GetContest': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContest,
                    request_deserializer=contest__pb2.GetContestRequest.FromString,
                    response_serializer=contest__pb2.GetContestResponse.SerializeToString,
            ),
            'ListContests': grpc.unary_unary_rpc_method_handler(
                    servicer.ListContests,
                    request_deserializer=contest__pb2.ListContestsRequest.FromString,
                    response_serializer=contest__pb2.ListContestsResponse.SerializeToString,
            ),
            'SubmitSolution': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitSolution,
                    request_deserializer=contest__pb2.SubmitSolutionRequest.FromString,
                    response_serializer=contest__pb2.SubmitSolutionResponse.SerializeToString,
            ),
            'GetSubmissions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubmissions,
                    request_deserializer=contest__pb2.GetSubmissionsRequest.FromString,
                    response_serializer=contest__pb2.GetSubmissionsResponse.SerializeToString,
            ),
            'GetLeaderboard': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLeaderboard,
                    request_deserializer=contest__pb2.GetLeaderboardRequest.FromString,
                    response_serializer=contest__pb2.GetLeaderboardResponse.SerializeToString,
            ),
            'StreamLeaderboard': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamLeaderboard,
                    request_deserializer=contest__pb2.StreamLeaderboardRequest.FromString,
                    response_serializer=contest__pb2.LeaderboardUpdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'contestmanager.ContestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('contestmanager.ContestService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ContestService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateContest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/contestmanager.ContestService/CreateContest',
            contest__pb2.CreateContestRequest.SerializeToString,
            contest__pb2.CreateContestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateContestWithProblems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/contestmanager.ContestService/CreateContestWithProblems',
            contest__pb2.CreateContestWithProblemsRequest.SerializeToString,
            contest__pb2.CreateContestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetContest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/contestmanager.ContestService/GetContest',
            contest__pb2.GetContestRequest.SerializeToString,
            contest__pb2.GetContestResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListContests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/contestmanager.ContestService/ListContests',
            contest__pb2.ListContestsRequest.SerializeToString,
            contest__pb2.ListContestsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitSolution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/contestmanager.ContestService/SubmitSolution',
            contest__pb2.SubmitSolutionRequest.SerializeToString,
            contest__pb2.SubmitSolutionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSubmissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/contestmanager.ContestService/GetSubmissions',
            contest__pb2.GetSubmissionsRequest.SerializeToString,
            contest__pb2.GetSubmissionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLeaderboard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/contestmanager.ContestService/GetLeaderboard',
            contest__pb2.GetLeaderboardRequest.SerializeToString,
            contest__pb2.GetLeaderboardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamLeaderboard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/contestmanager.ContestService/StreamLeaderboard',
            contest__pb2.StreamLeaderboardRequest.SerializeToString,
            contest__pb2.LeaderboardUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
